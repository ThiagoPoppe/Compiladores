Membros do grupo:
  1. Gabriel Lima Canguçu
  2. Giovanna Louzi Bellonia
  3. Thiago Martin Poppe

Algumas decisões de projeto
===========================

Para transcrevermos a gramática de COOL, foi criado um não terminal equivalente aos não terminais
presentes na gramática. Por exemplo, para o não terminal expr foi criado um não terminal equivalente
chamado de expression. Além disso, de um modo geral, cada não terminal "singular" possui a sua versão
"em lista" para regras que exigem a aparição repetida desse não terminal.

Como regra geral, os não terminais que possuem o sufixo "_list" são repetições de não terminais possuindo um
';' entre os não terminais; já com o sufixo "_params" são repetições possuindo um ',' entre os não terminais. Por exemplo, o não terminal formal_params representa o pedaço [ formal [[, formal]]* ] da primeira regra de uma feature.
Já o não terminal feature_list representa o pedaço [[feature;]]* da regra que define uma classe.

Um outro não terminal criado e que não está presente na gramática é o let_expression, e o porquê da sua criação
será explicado mais a frente.

A gramática como um todo foi implementada de forma bem direta, isto é, as regras foram quase que
explicitamente escritas através de código bison. Por exemplo, a regra <expr> '+' <expr> foi escrita
dentro das regras do não terminal expression como sendo:

expression '+' expression {
  $$ = plus($1, $3);
}

A terceira regra de uma expr, isto é, ID([ expr [[,expr]]* ]), não possuiu uma implementação tão direta quanto as demais. Essa regra é equivalente à usarmos uma regra de dispatch onde a primeira expressão é um "self", como foi mencionado nas documentações providenciadas. Sendo assim, essa regra foi implementada da seguinte forma:

OBJECTID '(' expression_params ')' {
    /* note que ela possui a mesma sintaxe que um dispatch onde a primeira expr é um self! */
    /* sendo assim nós definimos um id self na tabela de ids e recuperarmos a sua "entrada" */
    Entry *self = idtable.add_string((char*) "self");
    $$ = dispatch(object(self), $1, $3);
}

Uma outra expressão que não foi tão trivial de se implementar foi a expressão let, mais especificamente uma expressão
let com múltiplas declarações. Para isso, foi criado um não terminal let_expression que cuidará da questão de termos
múltiplas declarações.

A expressão let implementada no pacote de árvores foi implementada para expressões com apenas 1 declaração, sendo assim, para múltiplas declarações, nós devemos enxergar a expressão let de uma forma diferente. Notamos que um let com múltiplas declarações na verdade pode ser modelado como vários lets aninhados, e foi exatamente isso que fizemos. Primeiramente a expressão let será analisada através da seguinte regra:

LET let_expression {
  /* iremos apenas retornar o resultado do parsing do não terminal let_expression */
  $$ = $2;
}

Depois, reescrevemos a regra do let utilizando a ideia de lets aninhados, ficando da seguinte forma:

let_expression : OBJECTID ':' TYPEID IN expression %prec LET_ {
    /* let expression with no initialization */
    $$ = let($1, $3, no_expr(), $5);
}
| OBJECTID ':' TYPEID ASSIGN expression IN expression %prec LET_ {
    /* let expression with initialization */
    $$ = let($1, $3, $5, $7);
}
| OBJECTID ':' TYPEID ',' let_expression {
    /* nested let expressions where the first id has no initialization */
    $$ = let($1, $3, no_expr(), $5);
}
| OBJECTID ':' TYPEID ASSIGN expression ',' let_expression {
    /* nested let expressions where the first id has an initialization */
    $$ = let($1, $3, $5, $7);
}

Para a remoção da ambiguidade da gramática foi definido a precedência dos operadores como especificado nas documentações fornecidas. Para a ambiguidade do let, foi criado um novo token LET_ que será usado para adicionarmos precedência a esta regra tal qual o exemplo da calculadora feita durante a documentação do bison que explica um pouco mais o uso do %prec.

Tratamento e recuperação de erros
=================================

Através do uso do não terminal error, já presente no bison, fomos capazes de detectar erros no processo de parsing e continuar ele a partir da próxima sentença válida. Para isso, foram adicionadas novas regras na gramática que utilizam esse não terminal como um "coringa" para representarmos que algo de errado pode ocorrer naquela região específica.

Para tornar o processo de detecção de erros o mais simples e abrangente possível, optamos por colocar esse não terminal nas regras que definem os não terminais do tipo "lista". Logo, por exemplo, através da seguinte regra abaixo, somos capazes de detectar um erro em uma classe e mesmo assim continuar com o processamento do arquivo a fim de detectar o maior número de erros possíveis.

class_list : class ';' {
    /* a single class */
    $$ = single_Classes($1);
    parse_results = $$;
}
| class_list class ';' {
    /* at least one class */
    $$ = append_Classes($1, single_Classes($2));
    parse_results = $$;
}
| class_list error ';' { /* if a class is incorrect we can still process other ones */ };

Corretude do programa e testes desenvolvidos
============================================

Para corrigirmos o nosso analisador sintático, foi desenvolvido dois programas em COOL realizando testes que respeitam a gramática fornecida por completo (good.cl) e que geram erros sintáticos (bad.cl). Além disso, a saída do nosso analisador sintático foi comparada com a do analisador sintático previamente implementado presente nos arquivos fornecidos para esse trabalho prático como forma de validação.

É importante frizar que tais arquivos focam apenas em erros sintáticos. Dentro do arquivo good.cl nós temos testes que respeitam exclusivamente a parte gramatical de COOL, possuindo por exemplo sentenças que por mais que estejam semanticamente erradas ainda estão sintaticamente corretas. Mais especificamente essas sentenças podem ser vistas entre as linhas 166 e 170, contendo o seguinte exemplo similar ao que foi visto em sala de aula:

let x: Int <- 10, y: String <- "abc" in x + y .

Além de ter sido feito testes exaustivos sobre a gramática de COOL, o arquivo good.cl possui uma implementação recursiva bem simples do cálculo do n-ésimo número da sequência Fibonnaci. Porém, para poder compilar e executar esse código com sucesso é importante que as linhas que possuem erros semânticos (mencionadas anteriormente) sejam comentadas ou apagadas.

Enquanto que o arquivo good.cl testa a corretude da nossa implementação no que tange a cobertura da gramática, o arquivo bad.cl testa a corretude voltada para a parte de recuperação de erros. Esse arquivo foca, mais especificamente, em mostrar a recuperação de um erro quando temos um erro na declaração de uma classe, de uma feature, de uma declaração de variável dentro de um let e uma expressão errada dentro de um bloco de expressões.

Algo importante de se notar é que por mais que o parser detecte e se recupere de um erro, o bison apenas irá informar aquele erro caso ele consiga realizar 3 shifts com sucesso. Sendo assim, para termos uma exibição completa dos erros detectados, foi criado uma classe chamada NoError que força no mínimo 3 shifts para que o próximo erro seja exibido na tela através da função yyerror já definida no arquivo cool.y.

Para finalizar, o arquivo good.cl testa a gramática de forma exaustiva mas não explora 100% todas as possíveis combinações de expressões e resultados. Sendo assim, optamos por gerar um programa que testa cada regra da gramática separadamente, e, ao mostrarmos que por exemplo uma expressão pode ser uma condicional, nós já temos garantia de que podemos utilizar ela em qualquer outra região da gramática que pede por uma expressão, sendo possível até mesmo de gerar um código do tipo (if x = 10 then (new X) else (new Y) fi).metodo() como apresentado na linha 188 do arquivo.