Membros do grupo:
  1. Gabriel Lima Canguçu
  2. Giovanna Louzi Bellonia
  3. Thiago Martin Poppe

Algumas decisões de projeto
===========================

Como forma de implementar os passos encontrados no arquivo cgen.cc, optamos por utilizar o compilador original de COOL (providenciado através do script `coolc`) como uma referência, compilando o arquivo example.cl e observando o assembly gerado no arquivo example.s. Através dessa estratégia, fomos capazes de implementar as labels/tabelas <class>_protoObj, <class>_dispTab, class_nameTab, class_objTab e <class>_init.

Antes de começarmos qualquer implementação, foi feito um estudo minuncioso dos arquivos cgen.cc cgen.h e cool_tree.h. Percebemos que no arquivo cgen.h nós temos uma lista de CgenNodes que basicamente representa uma lista das classes do nosso programa COOL, que iremos usar praticamente para implementarmos tudo. Percebemos também que essa lista insere as classes sempre no início, onde o último elemento será a classe Object. Observando melhor os nós de cada lista, conseguimos descobrir que as tags para a classe Int, Bool e String serão 2, 3 e 4 respectivamente, o que permite adotarmos uma estratégia de associar a tag da classe à sua posição na lista.

Para facilitar a manipulação da lista, foi criada a função reverse_list, que inverte essa lista de classes, começando assim da classe Object. Isso facilitou muito a criação das tabelas em ordem, principalmente durante o código que emite a label class_objTab, necessitando de uma associação 1:1 da tag daquela classe com a sua posição na tabela.

Além de adicionarmos novas funcionalidades nos arquivos cgen.cc e cgen.h, optamos por modificar algumas classes do arquivo cool_tree.h. Mais especificamente, adicionamos um método virtual à classe Feature_class, indicando se aquela feature representa um atributo (valor 0) ou um método (valor 1). Modificamos também a classe Expression_class, adicionando também um método virtual que indica se aquela expressão é uma no_expr, para verificarmos se um atributo foi inicializado na classe ou não.

A seguir, iremos explicar um pouco mais sobre a lógica desenvolvida para cada etapa de geração de código desenvolvida pelo grupo.

Lógica para geração de código de prototype objects
==================================================

Foi criada uma função emit_prototype_objects que emite o código necessário para criarmos os objetos "protótipos". Seguindo a especificação presente no pdf cool_runtime, criamos a seguinte lógica:

  - Para cada classe na lista de classes reversa:
    1. Geramos código para a tag do coletor de lixo (.word -1);
    2. Geramos código para indicar a label do protótipo através das funções fornecidas;
    3. Para a tag da classe basta contarmos a sua posição da classe atual na lista de classes;
    4. Para o tamanho do objeto foi desenvolvido uma função auxiliar chamada get_number_of_attributes que recursivamente conta o número de atributos da classe atual e do seu pai. O tamanho do objeto será o número de atributos encontrados + 3, uma vez que por padrão teremos 3 campos em todos os protótipos que farão referência à tag da classe, tamanho do objeto e ponteiro para a sua dispatch table.
    5. Geramos código para indicar a dispatch table da classe através das funções fornecidas;
    6. Através da função code_prototype_attributes, iremos gerar o código necessário para cada atributo de classe, seguindo o padrão definido no cool_runtime, onde teremos primeiro os atributos da classe pai e depois da classe atual, assumindo uma lógica recursiva para tal. Para gerarmos tal código foi utilizado o código previamente definido que faz referência ao código gerado para cada atributo presente nas tabelas de símbolo (inttable, stringtable e falsebool).

Lógica para geração de código da class_nameTab
==============================================

Foi criado uma função chamada emit_class_nameTab, onde o código necessário para essa etapa é relativamente simples, consistindo em basicamente um caminhamento linear sobre a lista de classes reversa gerando o código através do mesmo código usado anteriormente que faz referência ao código gerado através das tabelas de símbolo (porém dessa vez através especificamente da stringtable).

Lógica para geração de código da class_objTab
=============================================

Foi criado uma função chamada emit_class_objTab, onde o código é bem similar ao passo anterior, porém dessa vez iremos apenas gerar o nome da classe com o sufixo _protoObj e o nome da classe com o sufixo _init, como especificado no cool_runtime.

Note que por estarmos trabalhando com a lista reversa essa tarefa fica bem mais simples, uma vez que a tag da classe representa a sua posição na lista.

Lógica para geração de código das dispatch tables
=================================================

Foi criado uma função chamada emit_dispatch_tables que caminha sobre a lista de classes reversa imprimindo a dispatch table de cada classe. Ela irá utilizar uma outra função auxiliar chamada de emit_dispTab que recursivamente irá gerar a dispatch table do seu pai e posteriormente a da classe atual. Com isso, fomos capazes de respeitar o padrão de ordem imposto também nas documentações fornecidas para esse trabalho.

Lógica para geração de código de inicialização de cada classe
=============================================================

De longe essa foi a função mais complexa desenvolvida. Foi criado uma função emit_class_init que irá emitir o código de inicialização de uma classe.

Essa função irá primeiramente realizar um procedimento padrão de atualizar o valor de $sp e salvar os registradores $fp, $self ($s0) e $acc ($a0), além de posteriormente atualizar o valor de $fp e mover o conteúdo de $acc para $self. Note que essa etapa foi descoberta observando o arquivo example.s como mencionado anteriormente.

Após isso, devemos verificar se precisamos chamar a inicialização do pai dessa classe (através de um jal), note que devemos sempre fazer isso exceto para a classe Object. Com a inicialização da classe pai feita, iremos gerar o código que inicializa os atributos da classe atual (caso necessário) e iremos retomar o estado anterior da pilha, isto é recuperando os valores de $fp, $s0 e $a0, além de atualizar novamente o valor de $sp.

O código que inicializa os atributos da classe atual foi inteiramente baseado no código gerado dentro do arquivo example.s. Foi utilizado novamente a função get_number_of_attributes para determinarmos o offset correto quando tivermos uma herança para uma classe que por sua vez possui atributos.

Conclusão e algumas observações
===============================

Como podemos ver, o trabalho prático foi entregado de forma incompleta. Porém, boa parte do processo inicial da geração de código (isto é o layout dos objetos) foi feito de forma clara e bem sucedida, possuindo a mesma geração que o compilador real de COOL.